"""
Men√∫ para b√∫squedas y filtros del CLI interactivo.

Este m√≥dulo contiene toda la l√≥gica para realizar b√∫squedas
avanzadas y aplicar filtros en el sistema.
"""

from typing import List

# Importaciones usando try/except para manejar diferentes contextos
try:
    from .cli_utils import (
        mostrar_titulo, mostrar_subtitulo, mostrar_menu_opciones,
        mostrar_tabla_tareas, mostrar_tabla_usuarios, mostrar_exito,
        mostrar_error, mostrar_advertencia, solicitar_entrada_requerida,
        solicitar_entrada, pausar, manejar_error_sistema, formatear_fecha_legible
    )
except ImportError:
    from cli.cli_utils import (
        mostrar_titulo, mostrar_subtitulo, mostrar_menu_opciones,
        mostrar_tabla_tareas, mostrar_tabla_usuarios, mostrar_exito,
        mostrar_error, mostrar_advertencia, solicitar_entrada_requerida,
        solicitar_entrada, pausar, manejar_error_sistema, formatear_fecha_legible
    )


class MenuBusquedas:
    """
    Clase que maneja el men√∫ de b√∫squedas y filtros.
    """
    
    def __init__(self, gestor):
        """
        Inicializa el men√∫ de b√∫squedas.
        
        Args:
            gestor: Instancia del gestor del sistema
        """
        self.gestor = gestor
    
    def mostrar_menu(self):
        """
        Muestra el men√∫ principal de b√∫squedas y filtros.
        """
        while True:
            try:
                opciones = [
                    "üîç B√∫squeda general",
                    "üìã Buscar tareas por criterio",
                    "üë• Buscar usuarios",
                    "‚è∞ Tareas pr√≥ximas a vencer",
                    "üö´ Tareas vencidas",
                    "üìä Filtros por estado",
                    "üéØ Filtros por prioridad",
                    "üë§ Tareas por usuario espec√≠fico",
                    "‚¨ÖÔ∏è Volver al men√∫ principal"
                ]
                
                mostrar_titulo("B√öSQUEDAS Y FILTROS")
                seleccion = mostrar_menu_opciones(opciones)
                
                if seleccion == 1:
                    self.busqueda_general()
                elif seleccion == 2:
                    self.buscar_tareas_por_criterio()
                elif seleccion == 3:
                    self.buscar_usuarios()
                elif seleccion == 4:
                    self.tareas_proximas_vencer()
                elif seleccion == 5:
                    self.tareas_vencidas()
                elif seleccion == 6:
                    self.filtrar_por_estado()
                elif seleccion == 7:
                    self.filtrar_por_prioridad()
                elif seleccion == 8:
                    self.tareas_por_usuario()
                elif seleccion == 9:
                    break
                    
            except Exception as e:
                manejar_error_sistema(e)
    
    def busqueda_general(self):
        """Realiza b√∫squeda general en el sistema."""
        try:
            mostrar_titulo("B√öSQUEDA GENERAL")
            
            termino = solicitar_entrada_requerida("T√©rmino de b√∫squeda")
            
            # Buscar en tareas
            tareas_encontradas = self.gestor.buscar_tareas(termino)
            
            # Buscar en usuarios
            usuarios_encontrados = []
            for usuario in self.gestor.usuarios:
                if (termino.lower() in usuario.nombre.lower() or 
                    termino.lower() in usuario.email.lower()):
                    usuarios_encontrados.append(usuario)
            
            # Mostrar resultados
            total_resultados = len(tareas_encontradas) + len(usuarios_encontrados)
            
            if total_resultados == 0:
                mostrar_advertencia(f"No se encontraron resultados para: '{termino}'")
            else:
                mostrar_subtitulo(f"Resultados de b√∫squeda ({total_resultados} encontrados)")
                
                if tareas_encontradas:
                    print(f"\nüìã TAREAS ENCONTRADAS ({len(tareas_encontradas)}):")
                    mostrar_tabla_tareas(tareas_encontradas)
                
                if usuarios_encontrados:
                    print(f"\nüë• USUARIOS ENCONTRADOS ({len(usuarios_encontrados)}):")
                    mostrar_tabla_usuarios(usuarios_encontrados)
            
            pausar()
            
        except Exception as e:
            manejar_error_sistema(e)
    
    def buscar_tareas_por_criterio(self):
        """Busca tareas usando diferentes criterios."""
        try:
            mostrar_titulo("BUSCAR TAREAS POR CRITERIO")
            
            criterios = [
                "üìù Por t√≠tulo",
                "üìÑ Por descripci√≥n",
                "üìÖ Por fecha de creaci√≥n",
                "‚è∞ Por fecha l√≠mite",
                "üîç B√∫squeda combinada"
            ]
            
            criterio_seleccion = mostrar_menu_opciones(criterios, "CRITERIO DE B√öSQUEDA")
            
            resultados = []
            
            if criterio_seleccion == 1:
                # B√∫squeda por t√≠tulo
                termino = solicitar_entrada_requerida("T√©rmino en el t√≠tulo")
                resultados = [t for t in self.gestor.tareas if termino.lower() in t.titulo.lower()]
                
            elif criterio_seleccion == 2:
                # B√∫squeda por descripci√≥n
                termino = solicitar_entrada_requerida("T√©rmino en la descripci√≥n")
                resultados = [t for t in self.gestor.tareas 
                            if t.descripcion and termino.lower() in t.descripcion.lower()]
                
            elif criterio_seleccion == 3:
                # Por fecha de creaci√≥n (hoy, ayer, esta semana)
                opciones_fecha = ["üìÖ Hoy", "üìÜ Ayer", "üìä Esta semana"]
                fecha_seleccion = mostrar_menu_opciones(opciones_fecha, "PER√çODO")
                
                from datetime import datetime, timedelta
                hoy = datetime.now().date()
                
                if fecha_seleccion == 1:  # Hoy
                    resultados = [t for t in self.gestor.tareas if t.fecha_creacion.date() == hoy]
                elif fecha_seleccion == 2:  # Ayer
                    ayer = hoy - timedelta(days=1)
                    resultados = [t for t in self.gestor.tareas if t.fecha_creacion.date() == ayer]
                elif fecha_seleccion == 3:  # Esta semana
                    inicio_semana = hoy - timedelta(days=hoy.weekday())
                    resultados = [t for t in self.gestor.tareas 
                                if t.fecha_creacion.date() >= inicio_semana]
                
            elif criterio_seleccion == 4:
                # Por fecha l√≠mite pr√≥xima
                from datetime import datetime, timedelta
                dias_adelante = 7  # Por defecto 7 d√≠as
                fecha_limite = datetime.now() + timedelta(days=dias_adelante)
                resultados = [t for t in self.gestor.tareas 
                            if t.fecha_limite and t.fecha_limite <= fecha_limite]
                
            elif criterio_seleccion == 5:
                # B√∫squeda combinada
                termino = solicitar_entrada_requerida("T√©rmino general")
                resultados = self.gestor.buscar_tareas(termino)
            
            if resultados:
                mostrar_subtitulo(f"Resultados encontrados ({len(resultados)} tareas)")
                mostrar_tabla_tareas(resultados)
            else:
                mostrar_advertencia("No se encontraron tareas que coincidan con el criterio")
            
            pausar()
            
        except Exception as e:
            manejar_error_sistema(e)
    
    def buscar_usuarios(self):
        """Busca usuarios espec√≠ficos."""
        try:
            mostrar_titulo("BUSCAR USUARIOS")
            
            termino = solicitar_entrada_requerida("T√©rmino de b√∫squeda (nombre o email)")
            
            resultados = []
            for usuario in self.gestor.usuarios:
                if (termino.lower() in usuario.nombre.lower() or 
                    termino.lower() in usuario.email.lower()):
                    resultados.append(usuario)
            
            if resultados:
                mostrar_subtitulo(f"Usuarios encontrados ({len(resultados)})")
                mostrar_tabla_usuarios(resultados)
                
                # Mostrar tareas de cada usuario encontrado
                for usuario in resultados:
                    tareas_usuario = [t for t in self.gestor.tareas if t.usuario_id == usuario.id]
                    print(f"\nüìã Tareas de {usuario.nombre}: {len(tareas_usuario)}")
                    if tareas_usuario:
                        pendientes = len([t for t in tareas_usuario if t.estado.value == 'pendiente'])
                        en_progreso = len([t for t in tareas_usuario if t.estado.value == 'en_progreso'])
                        completadas = len([t for t in tareas_usuario if t.estado.value == 'completada'])
                        print(f"  ‚Ä¢ Pendientes: {pendientes} | En progreso: {en_progreso} | Completadas: {completadas}")
            else:
                mostrar_advertencia("No se encontraron usuarios que coincidan con la b√∫squeda")
            
            pausar()
            
        except Exception as e:
            manejar_error_sistema(e)
    
    def tareas_proximas_vencer(self):
        """Muestra tareas pr√≥ximas a vencer."""
        try:
            mostrar_titulo("TAREAS PR√ìXIMAS A VENCER")
            
            # Obtener tareas pr√≥ximas a vencer (pr√≥ximos 7 d√≠as por defecto)
            tareas_proximas = list(self.gestor.obtener_tareas_proximas_vencer(7))
            
            if tareas_proximas:
                mostrar_subtitulo(f"Tareas que vencen en los pr√≥ximos 7 d√≠as ({len(tareas_proximas)})")
                mostrar_tabla_tareas(tareas_proximas)
                
                # Mostrar detalles adicionales
                print(f"\nüìä AN√ÅLISIS:")
                criticas = [t for t in tareas_proximas 
                          if t.fecha_limite and (t.fecha_limite - self.gestor.obtener_estadisticas_sistema()['fecha_consulta']).days <= 3]
                print(f"  ‚Ä¢ Tareas cr√≠ticas (‚â§3 d√≠as): {len(criticas)}")
                
            else:
                mostrar_advertencia("No hay tareas pr√≥ximas a vencer en los pr√≥ximos 7 d√≠as")
            
            pausar()
            
        except Exception as e:
            manejar_error_sistema(e)
    
    def tareas_vencidas(self):
        """Muestra tareas vencidas."""
        try:
            mostrar_titulo("TAREAS VENCIDAS")
            
            from datetime import datetime
            ahora = datetime.now()
            
            tareas_vencidas = [t for t in self.gestor.tareas 
                             if t.fecha_limite and t.fecha_limite < ahora and t.estado.value != 'completada']
            
            if tareas_vencidas:
                mostrar_subtitulo(f"Tareas vencidas ({len(tareas_vencidas)})")
                mostrar_tabla_tareas(tareas_vencidas)
                
                # Mostrar an√°lisis de d√≠as vencidos
                print(f"\nüìä AN√ÅLISIS DE VENCIMIENTOS:")
                for tarea in tareas_vencidas:
                    dias_vencida = (ahora - tarea.fecha_limite).days
                    print(f"  ‚Ä¢ {tarea.titulo[:30]:30} - Vencida hace {dias_vencida} d√≠as")
                
            else:
                mostrar_exito("¬°No hay tareas vencidas! üéâ")
            
            pausar()
            
        except Exception as e:
            manejar_error_sistema(e)
    
    def filtrar_por_estado(self):
        """Filtra tareas por estado."""
        try:
            mostrar_titulo("FILTRAR POR ESTADO")
            
            estados = ["üìã Pendientes", "‚è≥ En progreso", "‚úÖ Completadas"]
            estado_seleccion = mostrar_menu_opciones(estados, "ESTADO")
            
            estados_map = ["pendiente", "en_progreso", "completada"]
            estado_filtro = estados_map[estado_seleccion - 1]
            
            tareas_filtradas = list(self.gestor.listar_tareas_por_estado(estado_filtro))
            
            if tareas_filtradas:
                mostrar_subtitulo(f"Tareas {estado_filtro.replace('_', ' ')} ({len(tareas_filtradas)})")
                mostrar_tabla_tareas(tareas_filtradas)
            else:
                mostrar_advertencia(f"No hay tareas en estado: {estado_filtro.replace('_', ' ')}")
            
            pausar()
            
        except Exception as e:
            manejar_error_sistema(e)
    
    def filtrar_por_prioridad(self):
        """Filtra tareas por prioridad."""
        try:
            mostrar_titulo("FILTRAR POR PRIORIDAD")
            
            prioridades = ["üî¥ Alta", "üü° Media", "üü¢ Baja"]
            prioridad_seleccion = mostrar_menu_opciones(prioridades, "PRIORIDAD")
            
            prioridades_map = ["alta", "media", "baja"]
            prioridad_filtro = prioridades_map[prioridad_seleccion - 1]
            
            tareas_filtradas = [t for t in self.gestor.tareas 
                              if hasattr(t, 'prioridad') and t.prioridad == prioridad_filtro]
            
            if tareas_filtradas:
                mostrar_subtitulo(f"Tareas de prioridad {prioridad_filtro} ({len(tareas_filtradas)})")
                mostrar_tabla_tareas(tareas_filtradas)
            else:
                mostrar_advertencia(f"No hay tareas de prioridad: {prioridad_filtro}")
            
            pausar()
            
        except Exception as e:
            manejar_error_sistema(e)
    
    def tareas_por_usuario(self):
        """Muestra tareas de un usuario espec√≠fico."""
        try:
            mostrar_titulo("TAREAS POR USUARIO")
            
            if not self.gestor.usuarios:
                mostrar_error("No hay usuarios registrados")
                pausar()
                return
            
            print("Selecciona un usuario:")
            mostrar_tabla_usuarios(self.gestor.usuarios)
            
            while True:
                try:
                    indice_usuario = int(solicitar_entrada_requerida("N√∫mero de usuario")) - 1
                    if 0 <= indice_usuario < len(self.gestor.usuarios):
                        usuario_seleccionado = self.gestor.usuarios[indice_usuario]
                        break
                    else:
                        mostrar_error("N√∫mero de usuario inv√°lido")
                except ValueError:
                    mostrar_error("Por favor ingresa un n√∫mero v√°lido")
            
            # Obtener tareas del usuario
            tareas_usuario = [t for t in self.gestor.tareas if t.usuario_id == usuario_seleccionado.id]
            
            if tareas_usuario:
                mostrar_subtitulo(f"Tareas de {usuario_seleccionado.nombre} ({len(tareas_usuario)})")
                mostrar_tabla_tareas(tareas_usuario)
                
                # Estad√≠sticas del usuario
                pendientes = len([t for t in tareas_usuario if t.estado.value == 'pendiente'])
                en_progreso = len([t for t in tareas_usuario if t.estado.value == 'en_progreso'])
                completadas = len([t for t in tareas_usuario if t.estado.value == 'completada'])
                
                print(f"\nüìä ESTAD√çSTICAS DEL USUARIO:")
                print(f"  ‚Ä¢ Pendientes: {pendientes}")
                print(f"  ‚Ä¢ En progreso: {en_progreso}")
                print(f"  ‚Ä¢ Completadas: {completadas}")
                
                if tareas_usuario:
                    porcentaje_completado = (completadas / len(tareas_usuario)) * 100
                    print(f"  ‚Ä¢ Porcentaje de completado: {porcentaje_completado:.1f}%")
                
            else:
                mostrar_advertencia(f"{usuario_seleccionado.nombre} no tiene tareas asignadas")
            
            pausar()
            
        except Exception as e:
            manejar_error_sistema(e)
